<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/3/22
 * Time: 10:28
 * Author CleverStone
 * Github https://www.github.com/cleverstone
 * Blog https://cnblogs.com/hellow-world.
 */

namespace app\api\controller;

use app\common\RestController;
use app\common\model\Member;
use app\common\model\AdminSmslog;
use app\common\Helper;
use app\common\model\Attach;
use app\common\model\AdminConfig;
use think\db;
use app\common\Config;

/**
 * 会员/代理商登录控制器.
 *
 * Class Login
 *
 * @author CleverStone
 * @github https://www.github.com/cleverstone
 * @blog https://cnblogs.com/hellow-world
 */
class Login extends RestController
{
    /**
     * authentication过滤掉登录 / 注册 / 忘记密码
     *
     * @param array $disableAuthAction
     *
     * @author CleverStone
     * @github https://www.github.com/cleverstone
     * @blog https://cnblogs.com/hellow-world
     */
    protected function init(array $disableAuthAction = [])
    {
        $disableAuthAction = ['login','icRegister' , 'register', 'forget', 'checkVersions','switch'];
        parent::init($disableAuthAction); // TODO: Change the autogenerated stub
    }

    /**
     * app会员登录.
     *
     * @return \think\response\Json
     * @throws \Exception
     * @author CleverStone
     * @github https://www.github.com/cleverstone
     * @blog https://cnblogs.com/hellow-world
     *
     * @api *
     */
    public function login()
    {
        $post = $this->post;
        $validation = $this->validate($post, 'login.login');
        if ($validation !== true) {
            return $this->asNewJson('loginRet', 0, 'error', $validation);
        }

        $username = $post['username'];
        $password = md5($post['password']);
        $field = [
            'id', // 会员ID
            'username', // 用户名
            'password', // 密码
            'chn_name', // 昵称
            'photo', // 头像
            'balance', // 余额
            'hadsel', // 彩金
            'role', // 角色
            'is_moni', // 是否模拟
            'is_return_money', // 是否允许提现
            'is_delete', // 是否删除
            'real_status', // 实名状态
            'dev_status', // 是否允许发展下线
            'invite_code_head', // 邀请码ID
            'frozen', // 是否冻结
        ];

        $memberData = Member::getFieldsByWhere(['username' => $username], $field);
        if (strcmp($memberData['password'], $password)) {
            return $this->asNewJson('loginRet', 0, 'error', '用户名或密码错误');
        }

        if ($memberData['is_delete']) {
            return $this->asNewJson('loginRet', 0, 'error', '您的账号已被删除');
        }

        $frozen = (int)$memberData['frozen'];
        if ($frozen === 0) {
            return $this->asNewJson('loginRet', 0, 'error', '您的账户已冻结');
        }

        // 校验网站开关
        $value = AdminConfig::config('optradio');
        if (empty($value)) {
            return $this->asNewJson('loginRet', 0, 'error', 'APP升级维护中');
        }

        // 获取用户头像
        if (!empty($memberData['photo'])) {
            $memberData['photo'] = Helper::getCurrentHost() . Attach::getPathByAttachId($memberData['photo']);
        } else {
            $memberData['photo'] = '';
        }

        // 获取邀请二维码
        $model = new Member();
        $memberData['invite_code_head'] = $model->getInviteQrCodeByHead($memberData['id'], $memberData['invite_code_head']);
        $memberId = $memberData['id'];
        $isRegToken = $this->hasToken($memberId);
        if ($isRegToken) {
            $this->updateKey($memberId);
            $tokenInfo = $this->updateToken($memberId);
        } else {
            $tokenInfo = $this->setToken($memberId);
        }
        if (!$tokenInfo) {
            return $this->asNewJson('loginRet', 0, 'error', '登录错误,访问令牌发放失败!');
        }

        // 记录登录时间和IP
        Member::quickCreate([
            'id' => $memberData['id'],
            'last_login_time' => Helper::timeFormat(time(), 's'),
            'last_login_ip' => Helper::getClientIP(),
        ], true);
        unset($memberData['id']);
        $data = array_merge($memberData, $tokenInfo);
        $result[] = (string)$data['username'];
        $result[] = $data['chn_name'];
        $result[] = $data['photo'];
        $result[] = $data['balance'];
        $result[] = $data['hadsel'];
        $result[] = (string)$data['role'];
        $result[] = (string)$data['is_moni'];
        $result[] = (string)$data['is_return_money'];
        $result[] = (string)$data['real_status'];
        $result[] = (string)$data['dev_status'];
        $result[] = $data['invite_code_head'];
        $result[] = (string)$data['frozen'];
        $result[] = $data['_t'];
        $result[] = $data['_key'];
        $result[] = (string)$data['_uid'];

        return $this->asNewJson('loginRet', 1, 'success', '登录成功', $result);
    }

    /**
     * @desc 版本检测
     * @auther LiBin
     * @return \think\response\Json
     * @date 2019-05-11
     */
    public function checkVersions()
    {
        $data = $this->get;
        if (empty($data['versions'])) {
            return $this->asNewJson('versionsRet', 0, 'error', '缺失版本号');
        }

        $isLoad = false;
        //获取当前版本号: 0.安卓 1.ios
        if (empty($data['type'])) {//安卓
            $versionsPath = APP_PATH . 'api/versions.json';
        } else {//ios
            $versionsPath = APP_PATH . 'api/iosVersions.json';
        }
        $versionsFile = realpath($versionsPath);
        if (!$versionsFile) {
            return $this->asNewJson('versionsRet', 0, 'error', '版本号获取失败');
        }

        $jsonVsersions = file_get_contents($versionsFile);
        $vsersions = Helper::jsonDecode($jsonVsersions) ?: [];
        if (empty($vsersions)) {
            file_put_contents($versionsPath, Helper::jsonEncode(['versions' => $data['versions']]));
        } elseif ($vsersions['versions'] != $data['versions']) {//版本不同
            $serverVersion = explode('.', $vsersions['versions']);//服务器版本
            $clientVersion = explode('.', $data['versions']);//客户端版本
            if ($serverVersion[0] != $clientVersion[0]) {
                if ($serverVersion[0] > $clientVersion[0]) {
                    $isLoad = true;
                    return $this->asNewJson('versionsRet', 0, 'error', '此版本过低');
                } else {
                    file_put_contents($versionsPath, Helper::jsonEncode(['versions' => $data['versions']]));
                }

            } elseif ($serverVersion[1] != $clientVersion[1]) {
                if ($serverVersion[1] > $clientVersion[1]) {
                    $isLoad = true;
                    return $this->asNewJson('versionsRet', 0, 'error', '此版本过低');
                } else {
                    file_put_contents($versionsPath, Helper::jsonEncode(['versions' => $data['versions']]));
                }

            } elseif ($serverVersion[2] != $clientVersion[2]) {
                if ($serverVersion[2] > $clientVersion[2]) {
                    $isLoad = true;
                    return $this->asNewJson('versionsRet', 0, 'error', '此版本过低');
                } else {
                    file_put_contents($versionsPath, Helper::jsonEncode(['versions' => $data['versions']]));
                }
            }
        }

        if ($isLoad) {
            Helper::log(
                '系统',
                '客户端APP更新',
                "客户端版本: {$clientVersion}, 服务器版本: {$serverVersion}",
                '',
                1,
                3
            );
        }

        return $this->asNewJson('versionsRet', 1, 'success', "");

    }

    /**
     * 带邀请码注册链接
     * Notes:
     * author:smile
     * Date: 2019/8/22
     * Time: 16:50
     * @return \think\response\Json
     */
    public function icRegister(){
        $post = $this->post;
        if (isset($post['ic'])){
            $where['agent_invite_code'] = $post['ic'];
            $inviteInfo = Member::getFieldsByWhere($where, 'id,path,username');
            if (empty($inviteInfo)) {
                return $this->asNewJson('registerRet', 0, 'error', '请输入正确的邀请码');
            }
        }else{
            return $this->asNewJson('registerRet', 0, 'error', '请传递邀请码');
        }
        $host = Helper::getCurrentHost() . '/web/reg?ic=' .  $post['ic'];
        if ($host){
            return $this->asNewJson('registerRet', 1, 'success', '成功' ,$host);
        }
    }
    /**
     * @desc 用户注册功能
     * // $mobile //手机号
     * // $veifer //短信验证码
     * // $nickName //昵称
     * // $password //密码
     * // $inCode //邀请码
     * @return mixed
     * @throws \Exception
     * @auther LiBin
     * @date 2019-03-22
     */
    public function register()
    {
        $data = $this->post;
        $validation = $this->validate($data, 'login.register');
        if ($validation !== true) {
            return $this->asNewJson('registerRet', 0, 'error', $validation);
        }

        // 验证短信
        $smsLog = new AdminSmslog();
        $smsData = $smsLog->checkSms($data['mobile'], $data['code']);
        if ($smsData[0] == 0) {
            return $this->asNewJson('registerRet', $smsData[0], $smsData[1], $smsData['2']);
        }

        // 验证邀请码
        $where['agent_invite_code'] = $data['invCode'];
        $inviteInfo = Member::getFieldsByWhere($where, 'id,path,username');
        if (empty($inviteInfo)) {
            return $this->asNewJson('registerRet', 0, 'error', '请输入正确的邀请码');
        }

        // 邀请人ID
        $inviteId = $inviteInfo['id'];
        // 路径
        $invitePath = $inviteInfo['path'];
        // 账号
        $inviteUsername = $inviteInfo['username'];
        // 检测用户是否存在
        $checkWhere['username'] = $data['mobile'];
        $checkMember = Member::getValByWhere($checkWhere, 'id');
        if (!empty($checkMember)) {
            return $this->asNewJson('registerRet', 0, 'error', '手机号重复');
        }

        // 组合数据
        $member = new Member();
        $memberData['username'] = $data['mobile']; // 用户名
        $memberData['chn_name'] = $data['nickName']; // 昵称
        $memberData['password'] = md5($data['password']); // 尼玛
        $memberData['top_id'] = $inviteId; // 上级ID
        $memberData['top_username'] = $inviteUsername; // 上级账号
        $memberData['is_moni'] = 1; // 是否模拟, 否
        $memberData['role'] = 1; // 1会员,2代理商
        $memberData['frozen'] = 1; // 是否冻结, 否
        $memberData['is_return_money'] = 1; //默认可以提现
        $memberData['dev_status'] = 1; //默认可以发展下级
        $memberData['create_at'] = date('Y-m-d H:i:s'); //创建时间
        $memberData['agent_invite_code'] = $member->generateUserInviteCode(); // 邀请码
        $memberData['path'] = $invitePath . $inviteId . ','; // 路径

        $path = Helper::qrcode(Config::PictureHost.'?ic=' . $memberData['agent_invite_code']);
//        $path = Helper::qrcode(Helper::getCurrentHost() . '/web/reg?ic=' . $memberData['agent_invite_code']);
        if (empty($path['head'])) {
            return $this->asNewJson('registerRet', 0, 'error', '注册失败');
        }

        $memberData['invite_code_head'] = $path['head'];
        try {
            Db::startTrans();
            $addMember = $member->addMember($memberData);
            if (empty($addMember)) {
                trigger_error('注册失败', E_USER_WARNING);
            }

            Db::commit();
            return $this->asNewJson('registerRet', 1, 'success', '注册成功');
        } catch (\Exception $e) {
            Db::rollback();
            return $this->asNewJson('registerRet', 0, 'error', $e->getMessage());
        }
    }

    /**
     * @desc 密码找回
     * @auther LiBin
     * @return \think\response\Json
     * @throws \think\exception\DbException
     * @throws db\exception\DataNotFoundException
     * @throws db\exception\ModelNotFoundException
     * @date 2019-04-12
     */
    public function forget()
    {
        $data = $this->post;
        $validation = $this->validate($data, 'login.forget');
        if ($validation !== true) {
            return $this->asNewJson('forgetRet', 0, 'error', $validation);
        }

        // 验证短信
        $smsLog = new AdminSmslog();
        $smsData = $smsLog->checkSms($data['mobile'], $data['code']);
        if ($smsData[0] == 0) {
            return $this->asNewJson('forgetRet', $smsData[0], $smsData[1], $smsData['2']);
        }

        // 检测用户是否存在
        $checkWhere['username'] = $data['mobile'];
        $memberId = Member::getValByWhere($checkWhere, 'id');
        if (empty($memberId)) {
            return $this->asNewJson('forgetRet', 0, 'error', '请输入正确的手机号');
        }

        // 验证两次输入的密码是否一致
        if ($data['password'] !== $data['affirmPassword']) {
            return $this->asNewJson('forgetRet', 0, 'error', '两次密码输入不一致');
        }

        // 修改密码
        $member = new Member();
        $upPassword = $member->setMember(['username ' => $data['mobile']], ['password' => md5($data['password'])]);
        if ($upPassword === false) {
            return $this->asNewJson('forgetRet', 0, 'error', '修改失败');
        }

        return $this->asNewJson('forgetRet', 1, 'success', '修改成功');
    }

    /**
     * @desc 修改密码
     * //  password  密码
     * //  newPassword 新密码
     * //  affirmPassword 确认密码
     * @throws \Exception
     * @auther LiBin
     * @return \think\response\Json
     * @date 2019-04-12
     */
    public function changePassword()
    {
        $data = $this->post;
        $validation = $this->validate($data, 'login.changePassword');
        if ($validation !== true) {
            return $this->asNewJson('changePasswordRet', 0, 'error', $validation);
        }

        // 检测用户是否存在
        $member = new Member();
        $where['id'] = UID;
        $checkMember = $member->getOneMember($where, 'password');
        if (empty($checkMember)) {
            return $this->asNewJson('changePasswordRet', 0, 'error', '用户不存在');
        }

        $password = md5($data['password']);
        // 验证原始密码
        if ($password != $checkMember['password']) {
            return $this->asNewJson('changePasswordRet', 0, 'error', '请输入正确的密码');
        }

        // 修改密码
        $upPassword = $member->setMember($where, ['password' => md5($data['newPassword'])]);
        if ($upPassword === false) {
            return $this->asNewJson('changePasswordRet', 0, 'error', '修改失败');
        }

        return $this->asNewJson('changePasswordRet', 1, 'success', '修改成功');
    }

    /**
     * app开关
     */
    public function switch(){
        // 获取开关
        // 校验网站开关
        $value = AdminConfig::config('appSwitch');
        if (empty($value)) {
            $data['version'] = 0;
        }else{
            $data['version'] = 1;
            $data['url'] = AdminConfig::config('appUrl');
        }
        return $this->asNewJson('switch', 1, 'success', '获取成功', $data);
    }
}
