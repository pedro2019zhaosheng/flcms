<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/5/13
 * Time: 15:02
 * Author CleverStone
 * Github https://www.github.com/cleverstone
 * Blog https://cnblogs.com/hellow-world
 */

namespace app\api\controller;

use app\common\model\PlOpen;
use app\common\RestController;
use app\common\Config;
use app\common\model\Lottery;

/**
 * 数字彩控制器
 *
 * Class Number
 * @package app\api\controller
 * @author CleverStone
 * @github https://www.github.com/cleverstone
 * @blog https://cnblogs.com/hellow-world
 */
class Number extends RestController
{
    /**
     * 访问控制
     *
     * @param array $disableAuthAction
     * @author CleverStone
     * @github https://www.github.com/cleverstone
     * @blog https://cnblogs.com/hellow-world
     * @api *
     */
    protected function init(array $disableAuthAction = [])
    {
        $disableAuthAction = ['number', 'futureNumber', 'xyftBeforeData', 'xyftHistoryData', 'resultDescribe'];
        parent::init($disableAuthAction); // TODO: Change the autogenerated stub
    }

    /**
     * 数字彩出售中的期号
     *
     * @return \think\response\Json
     * @author CleverStone
     * @throws \Exception
     * @github https://www.github.com/cleverstone
     * @blog https://cnblogs.com/hellow-world
     * @api *
     */
    public function number()
    {
        $data = $this->get;
        // 参数过滤
        if (empty($data['type'])) {
            return $this->asNewJson('apiNumberRet', 0, 'error', '请传入查询的数字彩类型');
        }
        // 获取彩种代码
        switch ((int)$data['type']) {
            case 1: // 排三
                $code = Config::P3_CODE;
                break;
            case 2: // 排五
                $code = Config::P5_CODE;
                break;
            case 3: // 澳彩
                $code = Config::AO_CODE;
                break;
            case 4: // 葡彩
                $code = Config::PC_CODE;
                break;
            default:
                $code = '';
        }

        if (empty($code)) {
            return $this->asNewJson('apiNumberRet', 0, 'error', '请传入正确的数字彩类型');
        }

        // 获取彩种ID
        $id = Lottery::getIdByCode($code);
        $model = new PlOpen;
        $result = $model->getNumber($data['type']);
        // 获取当前彩种出售状态
        $check = PlOpen::checkSaleStatus($result, $data['type']);
        $check = ($check === true ? '1' : '0');
        $return = [$result, (string)$id, $check];
        // 获取澳彩, 葡彩当前期截止剩余时间
        switch ($data['type']) {
            case 3: // 澳彩
                $curNumTime = PlOpen::getValByWhere(['expect' => $result, 'ctype' => 3], 'open_time');
                $surTime = 180 - Config::AO_PU_SHUTDOWN_TIME;//开奖时间的基础上减10秒
                if (!empty($curNumTime)) {
                    $surTime = strtotime($curNumTime) - time() - Config::AO_PU_SHUTDOWN_TIME;
                    if ($surTime < 0) {
                        $surTime = 0;
                    }
                }

                array_push($return, (string)$surTime);
                break;
            case 4: // 葡彩
                $curNumTime = PlOpen::getValByWhere(['expect' => $result, 'ctype' => 4], 'open_time');
                $surTime = 300 - Config::AO_PU_SHUTDOWN_TIME;//开奖时间的基础上减10秒
                if (!empty($curNumTime)) {
                    $surTime = strtotime($curNumTime) - time() - Config::AO_PU_SHUTDOWN_TIME;
                    if ($surTime < 0) {
                        $surTime = 0;
                    }
                }

                array_push($return, (string)$surTime);
                break;
        }

        if ($result) {
            return $this->asNewJson('apiNumberRet', 1, 'success', '请求成功', $return);
        }

        return $this->asNewJson('apiNumberRet', 0, 'error', '服务器繁忙~,请稍后重试!~');
    }

    /**
     * 排三, 排五追期号码
     *
     * @param $number // 当前期号
     * @param $count // 追期数
     * @param $ctype // 数字彩类型 1: 排列三  2: 排列五
     * @return \think\response\Json
     * @author CleverStone
     * @github https://www.github.com/cleverstone
     * @blog https://cnblogs.com/hellow-world
     * @api *
     */
    public function futureNumber($number, $count, $ctype)
    {
        // 当前出售中的期号
        $number = (int)$number;
        if ($count < 2) {
            return $this->asNewJson('apiFutureNumberRet', 0, 'error', '追期数不能小于2');
        }

        if ($count > 76) {
            return $this->asNewJson('apiFutureNumberRet', 0, 'error', '追期数最大76期');
        }

        // 获取当前期的开奖时间
        $openTime = PlOpen::getValByWhere(['expect' => $number, 'ctype' => $ctype], 'open_time');
        $isNewYear = false;
        for ($i = 1; $i < $count; $i++) {
            // 期号对应的年份后缀
            $yearSuffix = substr(date('Y', strtotime($openTime . "+{$i} days")), 2);
            $number += 1;
            $curNumPrefix = substr($number, 0, 2);
            if (!$isNewYear && $yearSuffix != $curNumPrefix) {
                $number = intval($yearSuffix . '001');
            }
        }

        settype($number, 'string');
        return $this->asNewJson('apiFutureNumberRet', 1, 'success', '请求成功', [$number]);
    }

    // 幸运飞艇获取当前期和上一期数据
    // type 数字彩类型
    public function xyftBeforeData()
    {
        $data = $this->get;
        // 参数过滤
        if (empty($data['type'])) {
            return $this->asNewJson('xyftBeforeData', 0, 'error', '请传入查询的数字彩类型');
        }

        // 获取彩种代码
        if ((int)$data['type'] == 5) {
            $code = Config::FT_CODE;
        } else {
            $code = '';
        }
        if (empty($code)) {
            return $this->asNewJson('xyftBeforeData', 0, 'error', '请传入正确的数字彩类型');
        }

        // 获取彩种ID
        $id = Lottery::getIdByCode($code);
        $model = new PlOpen;
        $result = $model->getNumber($data['type']);
        if (empty($result)) {
            $dataInfo['lotteryId'] = '';
            $dataInfo['status'] = '';
            $dataInfo['expect'] = '';
            $dataInfo['surTime'] = (float)0;
            $dataInfo['startTime'] = (float)0;
            $dataInfo['id'] = '';
            $dataInfo['newExpect'] = '';
            $dataInfo['open_code'] = '';
            $dataInfo['describe'] = '';
            return $this->asNewJson('xyftBeforeData', 1, 'success', '请求成功', $dataInfo);
        }
        // 获取当前彩种出售状态
        $check = $model->checkSaleStatus($result, $data['type']);
        $check = ($check === true ? '1' : '0');
        // 获取幸运飞艇当前期截止剩余时间
        $curNumTime = $model->getValByWhere(['expect' => $result, 'ctype' => 5], 'open_time');
        $startTime = 300;  // 开奖时长
        $surTime = 300 - Config::XYFT_SHUTDOWN_TIME; // 开奖时间的基础上减30秒  封盘时长
        if (!empty($curNumTime)) {
            // 接口延时处理
            $startTime = strtotime($curNumTime . '+10 seconds') - time(); // 剩余开奖时长(做10s接口延迟,5s cron运行 5s 爬取等待)
            $surTime = strtotime($curNumTime) - time() - Config::XYFT_SHUTDOWN_TIME; // 剩余封盘时长
            if ($surTime < 0) {
                $surTime = 0;
            }
            if ($startTime < 0) {
                $startTime = 0;
            }
        }

        $resource = ['lotteryId' => (string)$id, 'status' => (string)$check, 'expect' => (string)$result, 'surTime' => (float)$surTime, 'startTime' => (float)$startTime];
        // 获取幸运飞艇上一期数据
        $where = ['ctype' => 5, 'status' => 1];
        $order = 'open_time desc';
        $limit = 1;
        $field = 'id,expect,open_code';
        $data = $model->getBeforeResults($where, $order, $limit, $field);
        if (!empty($data)) {
            $id = (string)$data[0]['id'];
            $newExpect = (string)$data[0]['expect'];
            $open_code = (string)$data[0]['open_code'];
            $describe = $model->getResultDescribe($data[0]['open_code']);
        } else {
            $id = '';
            $newExpect = '';
            $open_code = '';
            $describe = '';
        }

        $resource['id'] = $id;
        $resource['newExpect'] = $newExpect;
        $resource['open_code'] = $open_code;
        $resource['describe'] = $describe;

        return $this->asNewJson('xyftBeforeData', 1, 'success', '请求成功', $resource);
    }

    // 幸运飞艇获取历史数据
    // type 数字彩类型 
    // page 当前页码
    public function xyftHistoryData()
    {
        $data = $this->get;
        // 参数过滤
        if (empty($data['type'])) {
            return $this->asNewJson('xyftHistoryData', 0, 'error', '请传入查询的数字彩类型');
        }
        if (empty($data['page'])) {
            return $this->asNewJson('xyftHistoryData', 0, 'error', '请传入当前页码');
        }

        // 获取彩种代码
        if ((int)$data['type'] == 5) {
            $code = Config::FT_CODE;
        } else {
            $code = '';
        }
        if (empty($code)) {
            return $this->asNewJson('xyftHistoryData', 0, 'error', '请传入正确的数字彩类型');
        }

        $model = new PlOpen;
        $where = ['ctype' => 5, 'status' => 1];
        $order = 'open_time desc';
        $rows = $data['page'];
        $offset = 10;
        $field = 'id,expect,open_code';

        $result = $model->getPageData($where, $order, $rows, $offset, $field);
        if (!empty($result)) {
            // 总页数
            $countPage = $model->getBeforeResults($where, $order, '', $field);
            $pageNumber = intval(count($countPage) / $offset) + 1;

            // 获取开奖结果描述
            foreach ($result as $key => $val) {
                $info[$key]['id'] = (string)$val['id'];
                $info[$key]['expect'] = $val['expect'];
                $info[$key]['open_code'] = $val['open_code'];
                $describe = $model->getResultDescribe($val['open_code']);
                $info[$key]['describe'] = $describe;
            }
            $resource['data'] = $info;
            $resource['pageNumber'] = (string)$pageNumber;
        } else {
            $resource['data'] = [];
            $resource['pageNumber'] = '0';
        }

        return $this->asNewJson('xyftHistoryData', 1, 'success', '请求成功', $resource);
    }
}