<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/3/29
 * Time: 14:48
 * Author CleverStone
 * Github https://www.github.com/cleverstone
 * Blog https://cnblogs.com/hellow-world
 */

namespace app\api\controller;

use app\common\model\FundLog;
use app\common\model\JcdcBase;
use app\common\RestController;
use app\common\model\Order as OrderModel;
use app\common\Helper;
use app\common\model\JczqBase;
use app\common\model\JclqBase;
use app\common\model\Lottery;
use app\common\Config;

/**
 * APP下单控制器
 *
 * Class Order
 * @package app\api\controller
 * @author CleverStone
 * @github https://www.github.com/cleverstone
 * @blog https://cnblogs.com/hellow-world
 */
class Order extends RestController
{
    protected function init(array $disableAuthAction = [])
    {
        $disableAuthAction = ['pushOrderList'];
        parent::init($disableAuthAction); // TODO: Change the autogenerated stub
    }

    /**
     * 体彩下单
     *
     * @throws \Exception
     * @return \think\response\Json
     * @author CleverStone
     * @github https://www.github.com/cleverstone
     * @blog https://cnblogs.com/hellow-world
     * @api *
     */
    public function zcOrder()
    {
        $post = $this->post;
        $validation = $this->validate($post, 'order.insert');
        if ($validation !== true) {
            return $this->asNewJson('apizcorderRet', 0, 'error', $validation);
        }

        $model = new OrderModel;
        $result = $model->insertOrder($post);
        if ($result === true) {
            $fundLog = new FundLog();
            //订单成功后进行返佣操作.
            $fundLog->rebate($model->orderNum, 1);
            return $this->asNewJson('apizcorderRet', 1, 'success', '下单成功', [$model->orderNum]);
        }

        return $this->asNewJson('apizcorderRet', 0, 'error', $result);
    }

    /**
     * @desc 体彩订单详情
     * @author LiBin
     * @param $orderNum
     * @return \think\response\Json|string
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @date 2019-04-03
     */
    public function poDetail($orderNum)
    {
        $order = new OrderModel();
        // 获取订单数据
        $orderData = $order->getOrderDetails(['order_no' => $orderNum],
            [
                'id', // 订单ID
                'lottery_id as type', // 彩种ID
                'order_no', // 订单号
                'create_time', // 创建时间
                'bet_content', // 投注项
                'amount', // 投注金额
                'beishu', // 倍数
                'pay_hadsel', // 彩金支付金额
                'pay_balance', // 余额支付金额
                'bonus', // 中奖金额
                'status', // 出票状态 0：待出票 1：已出票 2：待开奖 3：未中奖 4：已中奖
            ]);
        $betContentArr = Helper::jsonDecode($orderData['bet_content']);
        $matchGather = array_filter(array_unique(array_column($betContentArr, 'mnum')));
        $code = Lottery::getValByWhere(['id' => $orderData['type']], 'code');//获取彩种code
        $shutOffTimeGather = [];
        // 获取当前注单投注赛事的最小截止时间
        foreach ($matchGather as $matchNum) {
            switch ($code) {
                case Config::ZC_CODE://足彩
                    $shutOffDate = JczqBase::getShutDownTimeByMatchNum($matchNum);
                    break;
                case Config::LC_CODE://篮彩
                    $shutOffDate = JclqBase::getShutDownTimeByMatchNum($matchNum);
                    break;
                case Config::BJ_CODE://北单
                    $shutOffDate = JcdcBase::getShutDownTimeByMatchNum($matchNum);
                    break;
                default:
                    return '投注项赛事类型不能为空';
            }

            array_push($shutOffTimeGather, $shutOffDate);
        }

        sort($shutOffTimeGather);
        reset($shutOffTimeGather);
        $minShutOffDate = current($shutOffTimeGather);
        $orderData['deadline'] = date("Y-m-d H:i:s", strtotime($minShutOffDate) - (60 * 10));//截止时间
        switch ((string)$code) {
            case Config::ZC_CODE://竞彩足球
                $orderData['type'] = 1;
                break;
            case Config::LC_CODE://篮彩
                $orderData['type'] = 2;
                break;
            case Config::BJ_CODE://北京单场
                $orderData['type'] = 3;
                break;
            default:
                trigger_error('该彩种不存在', E_USER_ERROR);

        }

        unset($orderData['bet_content']);
        // 获取中奖详情
        $details = $order->getOrderDetail($orderData['id']);
        $data = '';
        if (!empty($details)) {//不为空
            $bet = $details['bet_content'];
            foreach ($bet as $k => $v) {
                $bet[$k]['draw_result'] = implode(',', $v['draw_result']);//赛果
                $bet[$k]['bet_item'] = '';
                foreach ($v['bet_body'] as $key => $value) {
                    $bet[$k]['bet_item'] .= $value['bet_item'] . ',';
                }

                $bet[$k]['bet_item'] = trim($bet[$k]['bet_item'], ',');//赛事
                unset($bet[$k]['bet_body']);
            }

            $data = $bet;
        }

        $orderData['list'] = $data;
        return $this->asNewJson('zcOrderDetailsRet', 1, 'success', '订单详情获取成功', $orderData);
    }

    /**
     * 体彩推单
     *
     * @return \think\response\Json
     * @throws \Exception
     * @author CleverStone
     * @github https://www.github.com/cleverstone
     * @blog https://cnblogs.com/hellow-world
     * @api *
     */
    public function pushOrder()
    {
        $post = $this->post;
        $validation = $this->validate($post, 'order.push');
        if ($validation !== true) {
            return $this->asNewJson('apipushorderRet', 0, 'error', $validation);
        }

        $model = new OrderModel;
        $result = $model->pushOrder($post);
        if ($result === true) {
            return $this->asNewJson('apipushorderRet', 1, 'success', '推单成功');
        }

        return $this->asNewJson('apipushorderRet', 0, 'error', $result);
    }

    /**
     * @desc app跟单
     * @author LiBin
     * @return \think\response\Json
     * @throws \Exception
     * @date 2019-04-10
     */
    public function tailOrder()
    {
        $data = $this->post;
        $validation = $this->validate($data, 'order.tailOrder');
        if ($validation !== true) {
            return $this->asNewJson('tailOrderRet', 0, 'error', $validation);
        }

        $memberId = OrderModel::getValByWhere(['id' => $data['order_id']], 'member_id');
        if ($memberId == UID) {
            return $this->asNewJson('tailOrderRet', 0, 'error', '您的推单不可以自己跟哦!');
        }

        $order = new OrderModel();
        if ($data['type'] == 4 || $data['type'] == 5) {
            // 数字彩
            $orderData = $order->nltailOrder($data);
        } else {
            // 体彩
            $orderData = $order->tailOrder($data);
        }
        if ($orderData !== true) {
            return $this->asNewJson('tailOrderRet', 0, 'error', $orderData);
        }
        $FundLog = new FundLog();
        // 跟单成功后进行返佣操作.
        $FundLog->rebate($order->orderNum, 1);

        return $this->asNewJson('tailOrderRet', 1, 'success', '跟单成功', [$order->orderNum]);
    }

    /**
     * @desc 订单列表
     * @author LiBin
     * @throws \Exception
     * @return \think\response\Json
     * @date 2019-04-09
     */
    public function orderList()
    {
        $get = $this->get;
        $validation = $this->validate($get, 'order.orderList');
        if ($validation !== true) {
            return $this->asNewJson('orderListRet', 0, 'error', $validation);
        }
        $order = new OrderModel();
        // 每页数据条数
        $number = 20;
        $list = $order->getOrderList($get, 'create_time desc', $number);//获取订单列表数据
        // 总页数
        $number = ceil($list['count'] / $number);
        unset($list['count']);
        $type = 'orderListRet';
        $data['datas'] = $list;
        $data['pageNumber'] = $number;

        return $this->asNewJson($type, 1, 'success', '获取成功', $data);
    }

    /**
     * @desc 推单列表
     * @author LiBin
     * @return \think\response\Json
     * @throws \Exception
     * @date 2019-04-10
     */
    public function pushOrderList()
    {
        // 推单列表
        $data = $this->get;
        $order = new OrderModel();
        $where[] = ['sup_order_state', '=', 1]; // 推单审核状态
        $where[] = ['start_time', '>', date('Y-m-d H:i:s')]; // 跟单截止时间
        $where[] = ['pay_type', '=', 3]; // 订单类型
        $findField = [
            'id', // 订单ID
            'member_id', // 会员ID
            'start_time', // 跟单截止时间
            'chuan', // 串关信息
            'order_title', // 订单标题
            'amount', // 投注金额
            'start_amount', // 起跟金额
            'lottery_id', // 彩种ID
            'order_no', // 订单号
            'order_type', // 订单类型
        ];
        $list = $order->getPushOrder($where, $findField);
        if (empty($list)) {
            return $this->asNewJson('pushOrderListRet', 1, 'success', '获取成功', []);
        }

        if (isset($data['type']) && !empty($data['type'])) {
            // 默认跟单截止时间
            $sort = 'start_time';
            // 人气排行排序
            if ($data['type'] == 1) {
                $sort = 'number';
            }

            // 盈利排序
            if ($data['type'] == 2) {
                $sort = 'scort';
            }

            // 二维数组排序
            if (count($list) >= 2) {
                $orderData = array_column($list, $sort);
                array_multisort($orderData, SORT_DESC, $list);
            }
        }

        return $this->asNewJson('pushOrderListRet', 1, 'success', '获取成功', $list);
    }

    /**
     * @desc 中奖记录
     * @author LiBin
     * @return \think\response\Json
     * @throws \Exception
     * @date 2019-04-13
     */
    public function prizeRecord()
    {
        $data = $this->get;
        if (!empty($data['page'])) {//页码
            $where['page'] = $data['page'];
        }

        //彩种类型 1.体彩 2.数字彩 默认体彩
        if (isset($data['play_type']) && $data['play_type'] == 2) {
            $where['play_type'] = 2;
        } else {
            $where['play_type'] = 1;
        }

        // 中奖记录筛选标识 (该标识用于筛选中奖数据)
        $where['state'] = 4;
        // 支付类型标识 (该标识用于添加支付类型)
        $where['prizeRecord'] = 1;
        $order = new OrderModel();
        $orderData = $order->getOrderList($where, 'create_time desc');
        // 总页数
        $number = ceil($orderData['count'] / 20);
        unset($orderData['count']);
        if (empty($orderData)) {
            return $this->asNewJson('prizeRecordRet', 1, 'success', '获取成功', ['data' => [], 'pageNumber' => 1]);
        }

        return $this->asNewJson('prizeRecordRet', 1, 'success', '获取成功', ['data' => $orderData, 'pageNumber' => $number]);
    }

    /**
     * @desc 我的推单
     * @author LiBin
     * @return \think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @date 2019-04-13
     */
    public function myPush()
    {
        $data = $this->get;
        $order = new OrderModel();
        empty($data['page']) ? $page = 1 : $page = $data['page'];
        $where[] = ['pay_type', '=', 3];//订单类型 1：自购 2：跟单 3: 推单
        $where[] = ['member_id', '=', UID];//会员ID
        $findField = [
            'id', // 订单ID
            'sup_order_time as time', // 推单时间
            'beishu', // 倍数(体彩)  期数(数字彩)
            'chuan', // 串关信息
            'order_title', // 订单标题
            'lottery_id', // 彩种ID
            'status', // 状态, 0：待出票 1：已出票 2：待开奖 3：未中奖 4：已中奖
            'follow_order_commission', // 推单收益
            'order_type', // 订单类型, 1:体彩订单  2:数字彩订单
        ];
        $orderList = $order->myPushOrder($where, $findField, 20, $page);
        // 数据总条数
        $countNUmber = $order->getCountOrder($where);
        $number = ceil($countNUmber / 20);//向上取整获取页码
        if (empty($orderList)) {
            return $this->asNewJson('myPushRet', 1, 'success', '获取成功', ['data' => [], 'pageNumber' => 1]);
        }

        return $this->asNewJson('myPushRet', 1, 'success', '获取成功', ['data' => $orderList, 'pageNumber' => $number]);
    }

    /**
     * 排三/排五下单
     *
     * @return \think\response\Json
     * @author CleverStone
     * @throws \Exception
     * @github https://www.github.com/cleverstone
     * @blog https://cnblogs.com/hellow-world
     * @api *
     */
    public function nlOrder()
    {
        $post = $this->post;
        $validation = $this->validate($post, 'order.nlinsert');
        if ($validation !== true) {
            return $this->asNewJson('nlOrderRet', 0, 'error', $validation);
        }

        $model = new OrderModel;
        $result = $model->nlOrder($post);
        if ($result === true) {
            $fundLog = new FundLog();
            // 订单成功后进行返佣操作.
            $fundLog->rebate($model->orderNum, 1);
            return $this->asNewJson('nlOrderRet', 1, 'success', '下单成功', [$model->orderNum]);
        }

        return $this->asNewJson('nlOrderRet', 0, 'error', $result);
    }

    /**
     * @desc 葡彩/澳彩下单
     * @author LiBin
     * @throws \Exception
     * @return \think\response\Json
     * @date 2019-05-17
     */
    public function plOrder()
    {
        $post = $this->post;
        $validation = $this->validate($post, 'order.nlinsert');
        if ($validation !== true) {
            return $this->asNewJson('plOrderRet', 0, 'error', $validation);
        }

        $model = new OrderModel;
        $result = $model->plOrder($post);
        if ($result === true) {
            $fundLog = new FundLog();
            //订单成功后进行返佣操作.
            $fundLog->rebate($model->orderNum, 1);
            return $this->asNewJson('plOrderRet', 1, 'success', '下单成功', [$model->orderNum]);
        }

        return $this->asNewJson('plOrderRet', 0, 'error', $result);
    }

    /**
     * 幸运飞艇下单
     * @return \think\response\Json
     * @author CleverStone
     * @throws \Exception
     * @github https://www.github.com/cleverstone
     * @blog https://cnblogs.com/hellow-world
     * @api *
     */
    public function ftOrder(){
        $post = $this->post;
        $validation = $this->validate($post, 'order.ftinsert');
        if ($validation !== true) {
            return $this->asNewJson('ftOrderRet', 0, 'error', $validation);
        }
        $model = new OrderModel;
        $result = $model->ftOrder($post);
        if ($result === true) {
            $fundLog = new FundLog();
            //订单成功后进行返佣操作.
            $fundLog->rebate($model->orderNum, 1);
            return $this->asNewJson('ftOrderRet', 1, 'success', '下单成功', [$model->orderNum]);
        }

        return $this->asNewJson('ftOrderRet', 0, 'error', $result);
    }

    /**
     * 排三排五推单
     * @return \think\response\Json
     * @author CleverStone
     * @throws \Exception
     * @github https://www.github.com/cleverstone
     * @blog https://cnblogs.com/hellow-world
     * @api *
     */
    public function nlPushOrder()
    {
        $post = $this->post;
        $validation = $this->validate($post, 'order.nlPushOrder');
        if ($validation !== true) {
            return $this->asNewJson('nlPushOrderRet', 0, 'error', $validation);
        }

        $model = new OrderModel;
        $result = $model->nlpushOrder($post);
        if ($result === true) {
            return $this->asNewJson('nlPushOrderRet', 1, 'success', '推单成功');
        }

        return $this->asNewJson('nlPushOrderRet', 0, 'error', $result);
    }

    /**
     * @desc 数字彩订单详情
     * @author LiBin
     * @param $orderNum // 订单号
     * @return \think\response\Json
     * @throws \Exception
     * @date 2019-05-15
     * @updateBy CleverStone
     */
    public function nlpoDetail($orderNum)
    {
        $model = new OrderModel();
        $data = $model->getNumOrderDetail($orderNum);
        if(is_string($data)){
            return $this->asNewJson('nlpoDetailRet', 0, 'error', $data);
        }

        return $this->asNewJson('nlpoDetailRet', 1, 'success', '请求成功', $data);
    }
}